
Label @ Text {
    color: "#3C7DC1"
    fontSize: "32px"
    fontFamily: "Liberation Sans"
}

Button @ Item {
    width: this.l.textWidth < 140 ? 100 : (this.l.textWidth + 40)
    height: this.l.textHeight < 70 ? 50 : (this.l.textHeight + 20)
    label: ""
    cursor: "default"
    hoverEnabled: true
    backgroundColor: ^{
        if (this.mousePressed) {
            return "#006B9F";
        } else if (this.containsMouse) {
            return "#30A7DF";
        } else {
            return "#3C7DC1";
        }
    }^
    fontSize: "32px"

    Label {
        id: l
        color: "white"
        text: this.parent.label
        left: this.parent.width/2 - this.textWidth/2
        top: this.parent.height/2 - this.textHeight/2
        fontSize: this.parent.fontSize
    }
}

Deck @ Item {
    activeCard: undefined
    width: this.parent.width
    height: this.parent.height
    overflow: "hidden"

    function showCard(card): ^{
        if (this.activeCard === card) {
            return;
        }

        if (this.activeCard) {
            this.activeCard.top = this.bottom;
        }

        this.activeCard = card;
        this.activeCard.top = 0;
    }^

    onload: ^{
        var kids = this.children();

        for (var i in kids) {
            if (kids.hasOwnProperty(i)) {
                if (!this.activeCard) {
                    this.activeCard = kids[i];
                }

                if (kids[i] === this.activeCard) {
                    kids[i].top = 0;
                } else {
                    kids[i].top = this.bottom;
                }
            }
        }
    }^
}

Card @ Item {
    width: this.parent.width
    height: this.parent.height
    backgroundColor: "white"

    Behavior {
        top: "500ms"
        target: this.parent
    }
}

Layout @ Item {
    width: this.childrenWidth
    height: this.childrenHeight
    spacing: 10
    orientation: "vertical"

    function _layout(): ^{
        var kids = this.children();
        var sibling = undefined;

        if (this.spacing === 50)
            console.error("----------------------")
        for (var i in kids) {
            if (kids.hasOwnProperty(i)) {
                if (this.orientation === "vertical") {
                    if (this.spacing === 50)
                        console.log(sibling)
                    kids[i].top = sibling ? (this.spacing + sibling.bottom) : 0;
                    if (this.spacing === 50) {
                        console.log(kids[i].getSilent("top"), kids[i].getSilent("height"))
                    }
                    kids[i].left = 0;
                } else {
                    kids[i].top = 0;
                    kids[i].left = sibling ? (this.spacing + sibling.right) : 0;
                }
                sibling = kids[i];
            }
        }
    }^

    function _setupListeners(): ^{
        var kids = this.children();
        var that = this;

        for (var i in kids) {
            if (kids.hasOwnProperty(i)) {
                kids[i].addChanged('width', function () { that._layout() });
                kids[i].addChanged('height', function () { that._layout() });
            }
        }
    }^

    orientationChanged: this._layout();
    onload: this._setupListeners();
}

VerticalLayout @ Layout {
    orientation: "vertical"
}

HorizontalLayout @ Layout {
    orientation: "horizontal"
}